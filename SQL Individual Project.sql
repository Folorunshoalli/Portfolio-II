-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Census ID"
(
    csd_name character varying COLLATE pg_catalog."default" NOT NULL,
    csd_id character varying COLLATE pg_catalog."default",
    pru_id character varying COLLATE pg_catalog."default",
    "long" character varying COLLATE pg_catalog."default",
    lat character varying COLLATE pg_catalog."default",
    pst_code character varying(300) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Census ID_pkey" PRIMARY KEY (pst_code)
);

CREATE TABLE IF NOT EXISTS public."City "
(
    postal_code_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    city_id character varying(200) COLLATE pg_catalog."default" NOT NULL,
    prov_id character varying(200) COLLATE pg_catalog."default" NOT NULL,
    street_address character varying(400) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "City _pkey" PRIMARY KEY (postal_code_id)
);

CREATE TABLE IF NOT EXISTS public."Facility Table"
(
    index_id integer NOT NULL DEFAULT nextval('"Facility Table_index_id_seq"'::regclass),
    facility_name character varying(400) COLLATE pg_catalog."default" NOT NULL,
    facility_type character varying(400) COLLATE pg_catalog."default",
    odcaf_facility_type character varying(400) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Facility Table_pkey" PRIMARY KEY (index_id)
);

CREATE TABLE IF NOT EXISTS public."Street"
(
    index_id integer NOT NULL DEFAULT nextval('"Street_index_id_seq"'::regclass),
    provider_id character varying(400) COLLATE pg_catalog."default",
    unit character varying(100) COLLATE pg_catalog."default",
    street_no character varying(100) COLLATE pg_catalog."default",
    street_name character varying COLLATE pg_catalog."default",
    postal_code character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Street_pkey" PRIMARY KEY (postal_code)
);

ALTER TABLE IF EXISTS public."Census ID"
    ADD CONSTRAINT "Census ID_pst_code_fkey" FOREIGN KEY (pst_code)
    REFERENCES public."Street" (postal_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS "Census ID_pkey"
    ON public."Census ID"(pst_code);


ALTER TABLE IF EXISTS public."City "
    ADD CONSTRAINT "City _postal_code_id_fkey" FOREIGN KEY (postal_code_id)
    REFERENCES public."Street" (postal_code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS "City _pkey"
    ON public."City "(postal_code_id);


ALTER TABLE IF EXISTS public."Street"
    ADD CONSTRAINT "Street_index_id_fkey" FOREIGN KEY (index_id)
    REFERENCES public."Facility Table" (index_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;




Select  provider_id, street_no, street_name, postal_code 
from "Street"
where Street_no <> '..'
Limit 10 ;



Select f.index_id, f.facility_name , s.street_no, s.postal_code
from "Facility Table" f  
join "Street" s
on f.index_id = s.index_id
Limit 15;




Select distinct odcaf_facility_type 
from "Facility Table";

 
Select  provider_id, street_no, street_name, postal_code 
from "Street"
Order by provider_id Asc 
Limit 13;




Select index_id, facility_name, facility_type from "Facility Table"
GROUP by index_id, facility_name;


select postal_code, street_name, street_no from "Street"  
where postal_code in 
(select postal_code
 from "Street"
where street_name= 'church st')


Select sum(index_id) from "Street" where street_no = '20';


Alter table "Street" add house_owner VARCHAR(100)





Select index_id, street_no, street_name, postal_code 
     from "Street" 
      where street_name = 'botsford st'
	  
	  
	 
Select f.index_id, f.facility_name , s.street_no, s.postal_code, s.provider_id
from "Facility Table" f 
 join "Street" s
on f.index_id = s.index_id
where provider_id in (select provider_id from "Street" where provider_id = 'toronto')



